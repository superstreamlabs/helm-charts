############################################################
# GLOBAL configuration for Superstream Agent
############################################################
global:
  agentName: ""                   # Define the superstream agent name within 32 characters, excluding '.', and using only lowercase letters, numbers, '-', and '_'.
  superstreamAccountId: ""        # Provide the account ID associated with the deployment, which could be used for identifying resources or configurations tied to a specific account.
  superstreamActivationToken: ""  # Enter the activation token required for services or resources that need an initial token for activation or authentication.
  
  image:
    # Global image pull policy to use for all container images in the chart
    # can be overridden by individual image pullPolicy
    pullPolicy:
    # Global list of secret names to use as image pull secrets for all pod specs in the chart
    # secrets must exist in the same namespace
    # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    pullSecretNames: []
    # Global registry to use for all container images in the chart
    # can be overridden by individual image registry
    registry:

  # Global labels will be applied to all resources deployed by the chart
  labels: {}


############################################################
# Superstream Agent config
############################################################
superstreamAgent:
  releaseDate: ""
  # Number of replicas for the backend deployment
  replicaCount: 2
  image:
    # Docker image repository for the backend service
    repository: superstreamlabs/superstream-data-plane-be
    # Policy for pulling the image
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    registry: 
  imagePullSecrets: []
  # Overrides for Helm's default naming conventions
  nameOverride: ""
  fullnameOverride: "superstream"
  # Secret configuration for handling sensitive information
  secret:
    name: superstream-creds
    encryptionSecretKey: ""
    superstreamActivationToken: ""
    useExisting: false
  podAnnotations:
    prometheus.io/path: "/monitoring/metrics"
    prometheus.io/scrape: 'true'
    prometheus.io/port: "7777"
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  extraEnv: {}
    # Add custom environment variables below
    # - name: FEATURE_DP_FLAG
    #   value: "enabled"    
  service:
    enabled: true
    type: ClusterIP
    port: 7777
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: '8'
      memory: 8Gi
    requests:
      cpu: '1'
      memory: 1Gi
  # Autoscaling configuration for dynamically adjusting the number of pod replicas
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  nodeSelector: {}
  tolerations: []
  affinity: {}
  controlPlane:
    host: "broker.superstream.ai"
    port: 4222
  syslog:
    enabled: true
    remoteSyslog: telegraf
    port: 6514
    protocol: udp

############################################################
# Superstream Kafka Autoscaler config
############################################################
# Optional service to automatically scale the Kafka cluster up/down based on CPU and memory metrics   
autoScaler:
  enabled: true
  releaseDate: ""
  replicaCount: 2
  image:
      # Docker image repository for the backend service
    repository: superstreamlabs/superstream-kafka-auto-scaler
      # Policy for pulling the image
    pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  imagePullSecrets: []
  podAnnotations:
    prometheus.io/path: "/monitoring/metrics"
    prometheus.io/scrape: 'true'
    prometheus.io/port: "7777"
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  extraEnv: {}
    # Add custom environment variables below
    # - name: FEATURE_AS_FLAG
    #   value: "enabled"  
  service:
    enabled: true
    type: ClusterIP
    port: 7777 
  resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: '2'
      memory: 2Gi
    requests:
      cpu: '500m'
      memory: 500Mi
  # Enables autoscaling to manage the replicas of the autoscaler    
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75      
  nodeSelector: {}
  tolerations: []
  affinity: {}