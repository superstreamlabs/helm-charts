apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "telegraf.fullname" . }}
  labels:
    {{- include "telegraf.labels" . | nindent 4 }}
data:
  telegraf.conf: |
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      hostname = "$HOSTNAME"
      interval = "10s"
      logfile = "/tmp/telegraf.log"
      logfile_rotation_max_archives = 5
      logfile_rotation_max_size = "10MB"
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = false
      precision = ""
      quiet = false
      round_interval = true
    [[processors.enum]]
      [[processors.enum.mapping]]
        dest = "status_code"
        field = "status"
        [processors.enum.mapping.value_mappings]
            critical = 3
            healthy = 1
            problem = 2



    [[inputs.socket_listener]]
      service_address = "udp://:6514"
      data_format = "grok"
      grok_custom_patterns = '''
    CUSTOM_TIMESTAMP \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})
    CUSTOM_INT [+-]?\d+
    CUSTOM_HOSTNAME [0-9A-Za-z\.-]+
    CUSTOM_WORD [A-Za-z0-9_]+
    '''
      grok_patterns = [
        # Data Plane Log (Format B)
        "^<%{CUSTOM_INT:pri}>%{CUSTOM_TIMESTAMP:timestamp} %{CUSTOM_HOSTNAME:hostname} (?P<appname>[A-Za-z0-9_-]+)\\[%{CUSTOM_INT:procid}\\]: \\[account: %{CUSTOM_WORD:account}\\]\\[(?P<severity>[A-Za-z0-9_]+)\\] %{GREEDYDATA:message}",
        # Auto Scaler Log (Format A â€“ RFC5424 style)
        "^<%{CUSTOM_INT:pri}>(?P<version>\\d+) %{CUSTOM_TIMESTAMP:timestamp} %{CUSTOM_HOSTNAME:hostname} (?P<appname>[A-Za-z0-9_-]+) (?P<procid>[+-]?\\d+) - - (?P<severity>[A-Za-z0-9_]+) \\[account: (?P<account>[A-Za-z0-9_]+)\\] %{GREEDYDATA:message}"
      ]
      name_override = "superstream_logs"
      [inputs.socket_listener.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.agentName | quote }}
        agentName = {{ .Values.global.agentName | quote }}
    [[processors.converter]]
      namepass = ["superstream_logs"]
      [processors.converter.fields]
        tag = ["appname", "severity", "account","hostname"]
    [[processors.starlark]]
      namepass = [
        "superstream_logs"
      ]    
      source = '''
    def apply(metric):
        severity = metric.tags.get('severity')
        if severity == "ERR":
            metric.tags['level'] = "error" 
        elif severity == "WRN":
            metric.tags['level'] = "warning"            
        elif severity == "INF":
            metric.tags['level'] = "info"
        return metric
      ''' 
        [[processors.dedup]]
      namepass = ["superstream_logs"]    
      fieldinclude = ["message"]  
      dedup_interval = "10s"   
    [[processors.starlark]]
      namepass = [
        "superstream_logs"
      ]
      source = "def apply(metric):\n    unique_str = metric.name + str(metric.fields) + str(metric.tags)\n    random_value = str(hash(unique_str))[-8:]\n    metric.tags['eventId'] = random_value\n    return metric                                         \n"
    [[processors.starlark]]
      source = '''
    def apply(metric):
        level = metric.fields.get('level')
        if level == "I":
            metric.fields['level'] = "info"
        elif level == "W":
            metric.fields['level'] = "warning"
        elif level == "E":
            metric.fields['level'] = "error"
        return metric
      '''
    [[outputs.loki]]
      domain = "https://loki.mgmt.superstream.ai"
      timeout = "15s"
      endpoint = "/loki/api/v1/push"
      namepass = [
        "superstream_logs",
        "telegraf_logs"
      ]
      fieldexclude = [
        "SDID@0_eventSource",
        "facility_code",
        "severity_code",
        "version",
        "timestamp",
        "procid",
        "pri"
      ]
      [outputs.loki.http_headers]
        Authorization = "$TOKEN" 

    [[inputs.prometheus]]
      kubernetes_label_selector = "app.kubernetes.io/name in (superstream-agent)"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_method = "settings+annotations"
      monitor_kubernetes_pods_namespace = "superstream444"
      monitor_kubernetes_pods_port = 7777
      [inputs.prometheus.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.agentName | quote }}
        agentName = {{ .Values.global.agentName | quote }}

    [[outputs.http]]
      data_format = "prometheusremotewrite"
      timeout = "15s"
      method = "POST"
      namedrop = [
        "syslog",
        "telegraf_logs",
        "internal"
      ]
      url = "https://prometheus.mgmt.superstream.ai/api/v1/write"
      [outputs.http.headers]
        Authorization = "$TOKEN"  


    [[inputs.tail]]
      files = ["/tmp/telegraf.log"]
      from_beginning = false
      name_override = "telegraf_logs"
      data_format = "grok"
      grok_custom_patterns = '''
    LOGLEVEL [IWE]
    COMPONENT \[(.*?)\]
      '''
      grok_patterns = [
        "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level}! %{COMPONENT:component} %{GREEDYDATA:message}",
      ]
      [inputs.tail.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.agentName | quote }}
        agentName = {{ .Values.global.agentName | quote }}
        appname = "telegraf"

    [[inputs.internal]]
      collect_memstats = true
      [inputs.internal.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.agentName | quote }}
        agentName = {{ .Values.global.agentName | quote }}